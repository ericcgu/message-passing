Monolith would be broken up as is as Management approved the Proof of Concept:

1. FRONT END SERVICE - User Interface Service for Users
    - RATIONALE: Need a mobile / web ui. Reasoning is that this would be written in javascript of swift/android(java). 
    We need a seperate service with a seperate team and work stream effort.
2. LOCATION PRODUCER - 
    - RATIONALE: Since Minimum Viable Product (MVP) is supposed to handle a large volume of location data that will be ingested, we need to use gRPC and KAFKA
    to scale up the high volume. The LOCATION PRODUCER service is designed to accept and send location data to KAFKA QUEUE in a scalable way
3. KAFKA QUEUE  
    - RATIONALE: The LOCATION PRODUCER would send high volume of location data through protobuf/gRPC to KAFKA queue. 
4. LOCATION CONSUMER
    - RATIONALE: The LOCATION CONSUMER service is designed to subscribe and consume the location topic on the KAFKA queue. Once receiving messages, the LOCATION 
    CONSUMER WOULD persist LOCATION DATA IN DB
5. PEOPLE SERVICE
    - RATIONAL: Due to cost and mvp scope limitations, since this service does not need scaling at this time, this would be a simple REST call into the database.
6. CONNECTION SERVICE: This reads LOCATION AND 
    - RATIONAL: This service would combine PEOPLE AND LOCATION data to serve CONNECTION data from the database.
7. DATABASE SERVICE
    - RATIONAL: Due to cost and mvp concerns, the database will stay as is and store PEOPLE and LOCATION data.